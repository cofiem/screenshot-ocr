# SPDX-License-Identifier: Apache-2.0

[build-system]
requires = ["setuptools>=67.0.0", "wheel", "setuptools-git-versioning>=2.0,<3"]
build-backend = "setuptools.build_meta"

[project]
name = "screenshot-ocr"
description = "Extract text from screenshots."
readme = "README.md"
requires-python = ">=3.9"
keywords = ["ocr", "screenshot", "spreadsheet"]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Environment :: Console",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Utilities",
    "Intended Audience :: End Users/Desktop",
]
dynamic = [
    "version",
    "dependencies",
    "optional-dependencies",
]

[project.urls]
"Homepage" = "https://github.com/cofiem/screenshot-ocr"
"Changelog" = "https://github.com/cofiem/screenshot-ocr/blob/main/CHANGELOG.md"
"Source" = "https://github.com/cofiem/screenshot-ocr"
"Tracker" = "https://github.com/cofiem/screenshot-ocr/issues"

[project.scripts]
screenshot-ocr = 'screenshot_ocr.cli:main'

[tool.setuptools.packages.find]
where = ["src"]
# include and exclude accept strings representing glob patterns.
include = ["screenshot_ocr*"]

[tool.setuptools.dynamic]
dependencies = { file = ["requirements.txt"] }

[tool.setuptools.dynamic.optional-dependencies]
dev = { file = ["requirements-dev.txt"] }

[tool.setuptools-git-versioning]
enabled = true
version_file = "VERSION"
count_commits_from_version_file = true
dev_template = "{tag}.dev{ccount}"
dirty_template = "{tag}.dev{ccount}"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["-ra", "--strict-markers", "--strict-config"]
pythonpath = ["src"]
testpaths = "tests"
xfail_strict = true

[tool.coverage.run]
parallel = true
branch = true
source = ['screenshot_ocr']

[tool.coverage.paths]
source = ["src", ".tox/py*/**/site-packages"]

[tool.coverage.report]
show_missing = true
skip_covered = true

[tool.coverage.html]
skip_covered = true
skip_empty = true

[tool.ruff.lint.isort]
lines-between-types = 1
lines-after-imports = 2

[tool.tox]
requires = ["tox>=4.19"]
env_list = [
    "py3{9,10,11,12,13}-tests",
    "coverage-report",
    "py3{9,13}-lint-style",
    "lint-docs",
]

[tool.tox.env_run_base]
package = "wheel"
wheel_build_env = ".pkg"
extras = ["dev"]

[tool.tox.env.py39-tests]
commands = [
    ["python", "-X", "dev", "-m", "coverage", "run", "-m", "pytest", "{posargs}"],
]
[tool.tox.env.py310-tests]
commands = [
    ["python", "-X", "dev", "-m", "coverage", "run", "-m", "pytest", "{posargs}"],
]
[tool.tox.env.py311-tests]
commands = [
    ["python", "-X", "dev", "-m", "coverage", "run", "-m", "pytest", "{posargs}"],
]
[tool.tox.env.py312-tests]
commands = [
    ["python", "-X", "dev", "-m", "coverage", "run", "-m", "pytest", "{posargs}"],
]
[tool.tox.env.py313-tests]
commands = [
    ["python", "-X", "dev", "-m", "coverage", "run", "-m", "pytest", "{posargs}"],
]

[tool.tox.env.coverage-report]
parallel_show_output = true
commands = [
    ["coverage", "combine"],
    ["coverage", "report", "--fail-under=60"]
]

[tool.tox.env.py39-lint-style]
commands = [
    ["ruff", "check", "--fix", "--exit-non-zero-on-fix", "src", "tests"],
    ["ruff", "format", "--check", "--diff", "src", "tests"],
    ["mypy", "src"],
]
[tool.tox.env.py313-lint-style]
commands = [
    ["ruff", "check", "--fix", "--exit-non-zero-on-fix", "src", "tests"],
    ["ruff", "format", "--check", "--diff", "src", "tests"],
    ["mypy", "src"],
]

[tool.tox.env.lint-docs]
commands = [
    ["interrogate", "-vv", "--fail-under", "90", "src"],
    ["codespell", "--quiet-level", "0", "--summary", "--check-filenames", "--write-changes", "--skip", "*.pyc,*.png", "src", "tests"]
]

[tool.mypy]
strict = true
pretty = true
ignore_missing_imports = true
check_untyped_defs = true
no_implicit_optional = true
show_error_codes = true

[tool.ruff]
line-length = 88
show-fixes = true
src = ["src", "tests"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "TRY300", # don't want to move returns to else block
    "ANN003", # don't want to annotate kwargs
    "RET504", # assignments before return can be useful
    "ERA001", # ignore commented code
    "TD", # don't worry about todos format
    "FIX002", # todos are ok
    "COM812",
    "ISC001",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S", # lots of things not usually allowed can be used in test code
    "ANN", # don't worry about typing in tests
    "D", # ignore docstrings in tests
]